#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–ê–ü–û–ö
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ fotos –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
"""

import os
import subprocess
import sys
from pathlib import Path

def get_all_folders():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    fotos_dir = "fotos"
    if not os.path.exists(fotos_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{fotos_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return []
    
    folders = []
    for item in os.listdir(fotos_dir):
        item_path = os.path.join(fotos_dir, item)
        if os.path.isdir(item_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ 'big'
            big_path = os.path.join(item_path, "big")
            if os.path.exists(big_path):
                folders.append(item)
    
    return sorted(folders, key=lambda x: int(x) if x.isdigit() else 0)

def analyze_folder(folder_number):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞–ø–∫—É"""
    folder_path = f"fotos/{folder_number}/big"
    
    print(f"\n{'='*60}")
    print(f"üîç –ê–ù–ê–õ–ò–ó–ò–†–£–Æ –ü–ê–ü–ö–£ {folder_number}")
    print(f"üìÅ –ü—É—Ç—å: {folder_path}")
    print(f"{'='*60}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        result = subprocess.run([
            sys.executable, "final_photo_selector.py", folder_path
        ], capture_output=True, text=True, encoding='utf-8')
        
        if result.returncode == 0:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_lines = result.stdout.split('\n')
            for line in output_lines:
                if "–õ—É—á—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:" in line:
                    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {line}")
                    break
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {result.stderr}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_final_structure():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫"""
    print(f"\n{'='*60}")
    print(f"üìÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print(f"{'='*60}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏
    numbered_folders = [d for d in os.listdir('.') if d.startswith('selected_photos_')]
    numbered_folders.sort(key=lambda x: int(x.split('_')[-1]) if x.split('_')[-1].isdigit() else 0)
    
    if numbered_folders:
        print("üìÇ –ü–∞–ø–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏:")
        for folder in numbered_folders:
            folder_num = folder.split('_')[-1]
            photo_count = len([f for f in os.listdir(folder) if f.lower().endswith(('.jpg', '.jpeg', '.png'))])
            print(f"   üìÅ {folder}/ - {photo_count} —Ñ–æ—Ç–æ (–ø–∞–ø–∫–∞ {folder_num})")
    else:
        print("‚ùå –ü–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –ø–∞–ø–∫—É
    if os.path.exists("best_bag_photos_final"):
        total_files = len([f for f in os.listdir("best_bag_photos_final") if f.lower().endswith(('.jpg', '.jpeg', '.png'))])
        print(f"\nüìÇ –û–±—â–∞—è –ø–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print(f"   üìÅ best_bag_photos_final/ - {total_files} —Ñ–æ—Ç–æ (–≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–ê–ü–û–ö")
    print("="*60)
    print("üéØ –¶–µ–ª—å: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ fotos")
    print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    folders = get_all_folders()
    
    if not folders:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        return
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(folders)} –ø–∞–ø–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    for folder in folders:
        print(f"   üìÅ –ü–∞–ø–∫–∞ {folder}: fotos/{folder}/big/")
    
    print(f"\n‚è≥ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞–ø–∫—É
    for folder in folders:
        analyze_folder(folder)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    show_final_structure()
    
    print(f"\nüéâ –ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–ê–ü–û–ö –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö")
    print(f"üèÜ –ö–∞–∂–¥–∞—è –ø–∞–ø–∫–∞ –∏–º–µ–µ—Ç —Å–≤–æ–π –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞")

if __name__ == "__main__":
    main()
