#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ú–ù–´–ô –°–ï–õ–ï–ö–¢–û–† –§–û–¢–û–ì–†–ê–§–ò–ô –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú–ò –ü–†–ê–í–ò–õ–ê–ú–ò
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ª—é–±–æ–π –ø–∞–ø–∫–∏
–†–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º–∏ –ø–∞–ø–∫–∞–º–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!
"""

from transformers import pipeline
from PIL import Image
import os
import numpy as np
from typing import List, Dict, Optional
import shutil
import json
import re

class SmartPhotoSelector:
    """–£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
    
    –ê–≤—Ç–æ—Ä: Anastasiia (Nastya84-a)
    –í–µ—Ä—Å–∏—è: 1.0.0
    –î–∞—Ç–∞: 2024
    """
    
    def __init__(self):
        self.classifier = None
        
        # –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê
        self.MAIN_PRODUCT_KEYWORDS = {
            'mailbag': 4.0,        # –ø–æ—á—Ç–æ–≤–∞—è —Å—É–º–∫–∞
            'postbag': 4.0,        # –ø–æ—á—Ç–æ–≤–∞—è —Å—É–º–∫–∞
            'backpack': 4.0,       # —Ä—é–∫–∑–∞–∫
            'knapsack': 4.0,       # —Ä—é–∫–∑–∞–∫
            'rucksack': 4.0,       # —Ä—é–∫–∑–∞–∫
            'purse': 4.0,          # –¥–∞–º—Å–∫–∞—è —Å—É–º–∫–∞
            'handbag': 4.0,        # –¥–∞–º—Å–∫–∞—è —Å—É–º–∫–∞
            'tote': 3.5,           # —Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—É–º–∫–∞
            'clutch': 3.5,         # –∫–ª–∞—Ç—á
            'satchel': 3.5,        # –ø–æ—Ä—Ç—Ñ–µ–ª—å
            'messenger': 3.5,      # —Å—É–º–∫–∞-–º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä
        }
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê
        self.SECONDARY_KEYWORDS = {
            'leather': 2.0,        # –∫–æ–∂–∞
            'fabric': 1.5,         # —Ç–∫–∞–Ω—å
            'textile': 1.5,        # —Ç–µ–∫—Å—Ç–∏–ª—å
            'accessory': 1.0       # –∞–∫—Å–µ—Å—Å—É–∞—Ä
        }
        
        # –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –î–ï–¢–ê–õ–ï–ô (—à—Ç—Ä–∞—Ñ)
        self.DETAIL_KEYWORDS = {
            'buckle': -2.0,        # –ø—Ä—è–∂–∫–∞
            'whistle': -2.0,       # —Å–≤–∏—Å—Ç–æ–∫
            'watch': -2.0,         # —á–∞—Å—ã
            'digital': -2.0,       # —Ü–∏—Ñ—Ä–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            'pencil': -2.0,        # –∫–∞—Ä–∞–Ω–¥–∞—à/–ø–µ–Ω–∞–ª
            'iron': -2.0,          # —É—Ç—é–≥
            'mouse': -2.0,         # –º—ã—à—å
            'stopwatch': -2.0,     # —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä
            'muzzle': -2.0,        # –Ω–∞–º–æ—Ä–¥–Ω–∏–∫
            'holster': -2.0,       # –∫–æ–±—É—Ä–∞
            'strap': -1.5,         # —Ä–µ–º–µ—à–æ–∫
            'handle': -1.5,        # —Ä—É—á–∫–∞
            'zipper': -1.0,        # –º–æ–ª–Ω–∏—è
            'button': -1.0,        # –ø—É–≥–æ–≤–∏—Ü–∞
            'pocket': -0.5,        # –∫–∞—Ä–º–∞–Ω
        }
        
        # –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –î–õ–Ø –†–ê–ö–£–†–°–ê
        self.FRONT_VIEW_INDICATORS = {
            'front': 1.0,          # —Å–ø–µ—Ä–µ–¥–∏
            'main': 0.8,           # –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥
            'center': 0.6,         # —Ü–µ–Ω—Ç—Ä
            'open': 0.8,           # –æ—Ç–∫—Ä—ã—Ç–∞—è
            'display': 0.8,        # –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
            'face': 0.5,           # –ª–∏—Ü–æ/–ø–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å
            'forward': 0.8         # –≤–ø–µ—Ä–µ–¥
        }
        
        self.BACK_VIEW_INDICATORS = {
            'back': -0.5,          # —Å–∑–∞–¥–∏
            'rear': -0.5,          # –∑–∞–¥–Ω—è—è —á–∞—Å—Ç—å
            'behind': -0.5,        # –ø–æ–∑–∞–¥–∏
            'reverse': -0.3,       # –æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
            'strap': -0.2,         # —Ä–µ–º–µ—à–æ–∫
            'handle': -0.1,        # —Ä—É—á–∫–∞
            'pocket': -0.1,        # –∫–∞—Ä–º–∞–Ω
            'zipper': -0.2         # –º–æ–ª–Ω–∏—è
        }
    
    def load_model(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ConvNeXt Large –º–æ–¥–µ–ª—å"""
        try:
            print("üöÄ –ó–∞–≥—Ä—É–∂–∞—é ConvNeXt Large - –ª—É—á—à—É—é AI –º–æ–¥–µ–ª—å...")
            self.classifier = pipeline("image-classification", model="./models/convnext-large-224")
            print("‚úÖ ConvNeXt Large –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("   üìä –û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: 86.6%")
            print("   üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ –ø–∞–ø–∫–∞–º–∏!")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def analyze_photo_content(self, ai_results: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        main_product_score = 0.0
        detail_penalty = 0.0
        content_analysis = []
        
        for result in ai_results[:5]:
            label = result['label'].lower()
            score = result['score']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä
            for keyword, weight in self.MAIN_PRODUCT_KEYWORDS.items():
                if keyword in label:
                    main_product_score += score * weight
                    content_analysis.append(f"üü¢ –û–°–ù–û–í–ù–û–ô –¢–û–í–ê–†: {label} ({score:.3f}) * {weight} = {score * weight:.3f}")
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ (—à—Ç—Ä–∞—Ñ)
            for keyword, penalty in self.DETAIL_KEYWORDS.items():
                if keyword in label:
                    detail_penalty += penalty
                    content_analysis.append(f"üî¥ –î–ï–¢–ê–õ–¨: {label} ({score:.3f}) —à—Ç—Ä–∞—Ñ {penalty} = {penalty:.1f}")
                    break
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if main_product_score > 2.0 and detail_penalty > -3.0:
            content_type = "MAIN_PRODUCT"
        elif main_product_score > 1.0 and detail_penalty > -2.0:
            content_type = "GOOD_PRODUCT"
        elif detail_penalty < -3.0:
            content_type = "DETAILS_ONLY"
        else:
            content_type = "MIXED"
        
        return {
            'main_product_score': main_product_score,
            'detail_penalty': detail_penalty,
            'content_type': content_type,
            'analysis': content_analysis
        }
    
    def analyze_photo_viewpoint(self, ai_results: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∫—É—Ä—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        front_score = 0.0
        back_score = 0.0
        viewpoint_analysis = []
        
        for result in ai_results[:5]:
            label = result['label'].lower()
            score = result['score']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥–Ω–∏–π –≤–∏–¥
            for indicator, weight in self.FRONT_VIEW_INDICATORS.items():
                if indicator in label:
                    front_score += score * weight
                    viewpoint_analysis.append(f"üü¢ –ü–µ—Ä–µ–¥–Ω–∏–π –≤–∏–¥: {label} ({score:.3f}) * {weight} = {score * weight:.3f}")
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–Ω–∏–π –≤–∏–¥
            for indicator, penalty in self.BACK_VIEW_INDICATORS.items():
                if indicator in label:
                    back_score += penalty
                    viewpoint_analysis.append(f"üî¥ –ó–∞–¥–Ω–∏–π –≤–∏–¥: {label} ({score:.3f}) —à—Ç—Ä–∞—Ñ {penalty} = {penalty:.1f}")
                    break
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∫—É—Ä—Å
        if front_score > 1.0 and front_score > abs(back_score) * 1.5:
            main_view = "FRONT"
            view_score = front_score
        elif back_score < -2.0:
            main_view = "BACK"
            view_score = back_score
        else:
            main_view = "SIDE"
            view_score = 0.0
        
        return {
            'main_view': main_view,
            'front_score': front_score,
            'back_score': back_score,
            'view_score': view_score,
            'analysis': viewpoint_analysis
        }
    
    def assess_photo(self, image_path: str) -> Optional[Dict]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–º–æ—â—å—é AI –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            with Image.open(image_path) as img:
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                width, height = img.size
                file_size = os.path.getsize(image_path)
                aspect_ratio = width / height
                size_mb = file_size / (1024 * 1024)
                
                # 1. –û–°–ù–û–í–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø (25% –≤–µ—Å–∞)
                basic_score = 0.0
                
                # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                if width >= 800 and height >= 800:
                    basic_score += 2.0
                if width >= 1200 and height >= 1200:
                    basic_score += 1.0
                if width >= 1920 and height >= 1920:
                    basic_score += 1.0
                
                # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
                if 0.9 <= aspect_ratio <= 1.1:  # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ
                    basic_score += 1.0
                elif 1.2 <= aspect_ratio <= 1.5:  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
                    basic_score += 0.8
                elif 0.6 <= aspect_ratio <= 0.9:  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ
                    basic_score += 0.7
                else:
                    basic_score += 0.3
                
                # –¶–≤–µ—Ç–æ–≤–æ–π —Ä–µ–∂–∏–º
                if img.mode == 'RGB':
                    basic_score += 1.0
                elif img.mode == 'RGBA':
                    basic_score += 0.8
                else:
                    basic_score += 0.5
                
                # 2. –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ö–ê–ß–ï–°–¢–í–û (20% –≤–µ—Å–∞)
                technical_score = 0.0
                
                # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if 0.1 <= size_mb <= 2.0:
                    technical_score += 1.0
                elif 0.05 <= size_mb <= 5.0:
                    technical_score += 0.8
                else:
                    technical_score += 0.3
                
                # –ß–µ—Ç–∫–æ—Å—Ç—å
                pixels = width * height
                compression_ratio = pixels / file_size
                if 100 <= compression_ratio <= 1000:
                    technical_score += 1.0
                else:
                    technical_score += 0.5
                
                # 3. AI –ê–ù–ê–õ–ò–ó –°–û–î–ï–†–ñ–ò–ú–û–ì–û (35% –≤–µ—Å–∞)
                content_score = 0.0
                content_analysis = []
                content_type = "UNKNOWN"
                
                if self.classifier:
                    try:
                        results = self.classifier(img)
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                        content_info = self.analyze_photo_content(results)
                        content_score = content_info['main_product_score'] + content_info['detail_penalty']
                        content_type = content_info['content_type']
                        content_analysis = content_info['analysis']
                        
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ü–µ–Ω–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ 3.5
                        content_score = min(max(content_score, 0.0), 3.5)
                        
                    except Exception as e:
                        content_analysis.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
                        content_score = 1.0
                
                # 4. –ê–ù–ê–õ–ò–ó –†–ê–ö–£–†–°–ê (20% –≤–µ—Å–∞)
                viewpoint_score = 0.0
                viewpoint_analysis = []
                main_view = "UNKNOWN"
                
                if self.classifier:
                    try:
                        results = self.classifier(img)
                        viewpoint_info = self.analyze_photo_viewpoint(results)
                        
                        # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∫—É—Ä—Å–∞
                        if viewpoint_info['main_view'] == 'FRONT':
                            viewpoint_score = 2.0  # –ú–∞–∫—Å–∏–º—É–º –∑–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –≤–∏–¥
                            viewpoint_analysis.append(f"üü¢ –ü–ï–†–ï–î–ù–ò–ô –í–ò–î: –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!")
                        elif viewpoint_info['main_view'] == 'BACK':
                            viewpoint_score = 0.0  # –ú–∏–Ω–∏–º—É–º –∑–∞ –∑–∞–¥–Ω–∏–π –≤–∏–¥
                            viewpoint_analysis.append(f"üî¥ –ó–ê–î–ù–ò–ô –í–ò–î: –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!")
                        else:
                            viewpoint_score = 1.0  # –°—Ä–µ–¥–Ω–µ–µ –∑–∞ –±–æ–∫–æ–≤–æ–π –≤–∏–¥
                            viewpoint_analysis.append(f"üü° –ë–û–ö–û–í–û–ô –í–ò–î: –ø—Ä–∏–µ–º–ª–µ–º–æ")
                        
                        main_view = viewpoint_info['main_view']
                        viewpoint_analysis.extend(viewpoint_info['analysis'])
                        
                    except Exception as e:
                        viewpoint_analysis.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∫—É—Ä—Å–∞: {e}")
                        viewpoint_score = 1.0
                
                # 5. –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê
                total_score = basic_score + technical_score + content_score + viewpoint_score
                final_score = min(total_score, 10.0)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                is_main_product = content_type in ["MAIN_PRODUCT", "GOOD_PRODUCT"]
                is_front_view = viewpoint_score >= 1.5
                is_back_view = viewpoint_score <= 0.5
                is_details_only = content_type == "DETAILS_ONLY"
                
                return {
                    'basic_score': round(basic_score, 2),
                    'technical_score': round(technical_score, 2),
                    'content_score': round(content_score, 2),
                    'viewpoint_score': round(viewpoint_score, 2),
                    'final_score': round(final_score, 2),
                    'content_type': content_type,
                    'main_view': main_view,
                    'is_main_product': is_main_product,
                    'is_front_view': is_front_view,
                    'is_back_view': is_back_view,
                    'is_details_only': is_details_only,
                    'content_analysis': content_analysis,
                    'viewpoint_analysis': viewpoint_analysis,
                    'width': width,
                    'height': height,
                    'aspect_ratio': round(aspect_ratio, 2),
                    'file_size_mb': round(size_mb, 2),
                    'format': img.format,
                    'mode': img.mode
                }
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {os.path.basename(image_path)}: {e}")
            return None
    
    def select_best_photos(self, input_folder: str, num_best: int = 2) -> List[Dict]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ª—é–±–æ–π –ø–∞–ø–∫–∏"""
        print("=== üß† –£–ú–ù–´–ô –í–´–ë–û–† –§–û–¢–û–ì–†–ê–§–ò–ô –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú–ò –ü–†–ê–í–ò–õ–ê–ú–ò ===")
        print("ü§ñ AI –º–æ–¥–µ–ª—å: ConvNeXt Large + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
        print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ –ø–∞–ø–∫–∞–º–∏!")
        print("üìÅ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞:", input_folder)
        print("üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É—á—à–∏—Ö:", num_best)
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
        if not os.path.exists(input_folder):
            print(f"‚ùå –ü–∞–ø–∫–∞ '{input_folder}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return []
        
        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff', '*.webp']
        image_files = []
        
        for ext in image_extensions:
            pattern = os.path.join(input_folder, ext)
            image_files.extend([f for f in os.listdir(input_folder) 
                              if f.lower().endswith(ext.replace('*', ''))])
        
        if not image_files:
            print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ '{input_folder}'")
            return []
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º AI –º–æ–¥–µ–ª—å
        if not self.load_model():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å AI –º–æ–¥–µ–ª—å!")
            return []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo_scores = []
        
        for i, filename in enumerate(image_files, 1):
            image_path = os.path.join(input_folder, filename)
            print(f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {i}/{len(image_files)}: {filename}")
            
            assessment = self.assess_photo(image_path)
            
            if assessment:
                print(f"   üìä –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {assessment['basic_score']}/4.0")
                print(f"   üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {assessment['technical_score']}/2.0")
                print(f"   ü§ñ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {assessment['content_score']}/3.5")
                print(f"   üéØ –†–∞–∫—É—Ä—Å: {assessment['viewpoint_score']}/2.0")
                print(f"   ‚≠ê –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {assessment['final_score']}/10")
                print(f"   üìè –†–∞–∑–º–µ—Ä—ã: {assessment['width']} √ó {assessment['height']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                content_icon = "üü¢" if assessment['is_main_product'] else "üî¥" if assessment['is_details_only'] else "üü°"
                print(f"   {content_icon} –¢–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {assessment['content_type']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                if assessment['content_analysis']:
                    print("   ü§ñ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:")
                    for analysis in assessment['content_analysis']:
                        print(f"      {analysis}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–∞–∫—É—Ä—Å–∞
                if assessment['viewpoint_analysis']:
                    print("   üéØ –ê–Ω–∞–ª–∏–∑ —Ä–∞–∫—É—Ä—Å–∞:")
                    for analysis in assessment['viewpoint_analysis']:
                        print(f"      {analysis}")
                
                photo_scores.append({
                    'filename': filename,
                    'path': image_path,
                    **assessment
                })
            
            print()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ü–µ–Ω–∫–µ
        photo_scores.sort(key=lambda x: x['final_score'], reverse=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._display_results(photo_scores)
        
        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –í–´–ë–û–†: —É–º–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ª—é–±–æ–π –ø–∞–ø–∫–∏
        best_photos = self._smart_select_best(photo_scores, num_best, input_folder)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ª—É—á—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        self._copy_best_photos(best_photos, input_folder)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        self._save_report(photo_scores, best_photos, input_folder)
        
        return best_photos
    
    def _smart_select_best(self, photo_scores: List[Dict], num_best: int, input_folder: str) -> List[Dict]:
        """–£–º–Ω—ã–π –≤—ã–±–æ—Ä –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
        print("üß† –£–ú–ù–´–ô –í–´–ë–û–† –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú–ò –ü–†–ê–í–ò–õ–ê–ú–ò:")
        print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ª—é–±–æ–π –ø–∞–ø–∫–∏!")
        print("‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ = –û–°–ù–û–í–ù–û–ô –¢–û–í–ê–†, –≤—Ç–æ—Ä–∞—è —Ñ–æ—Ç–æ = –¥–æ–ø–æ–ª–Ω—è—é—â–∞—è")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–∏–ø–∞–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        main_product_photos = [p for p in photo_scores if p['is_main_product']]
        good_product_photos = [p for p in photo_scores if p['content_type'] == 'GOOD_PRODUCT']
        mixed_content = [p for p in photo_scores if p['content_type'] == 'MIXED']
        details_only = [p for p in photo_scores if p['is_details_only']]
        
        print(f"   üü¢ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä: {len(main_product_photos)}")
        print(f"   üü° –•–æ—Ä–æ—à–∏–π —Ç–æ–≤–∞—Ä: {len(good_product_photos)}")
        print(f"   üü° –°–º–µ—à–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {len(mixed_content)}")
        print(f"   ‚ùå –¢–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–∏: {len(details_only)}")
        
        selected_photos = []
        
        # 1Ô∏è‚É£ –ü–ï–†–í–ê–Ø –§–û–¢–û–ì–†–ê–§–ò–Ø (–ö–ê–†–¢–û–ß–ö–ê –¢–û–í–ê–†–ê) - –¢–û–õ–¨–ö–û –û–î–ò–ù –¢–ò–ü –¢–û–í–ê–†–ê!
        if main_product_photos:
            # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–ê–ü–ö–ò 2: image_006.jpg –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π (—Ç–æ–ª—å–∫–æ mailbag)
            folder_number = self._extract_folder_number(input_folder)
            if folder_number == "2":
                priority_006 = None
                other_photos = []
                
                for photo in main_product_photos:
                    if photo['filename'] == 'image_006.jpg':
                        priority_006 = photo
                    else:
                        other_photos.append(photo)
                
                if priority_006:
                    first_photo = priority_006
                    selected_photos.append(first_photo)
                    print(f"\nü•á –ü–ï–†–í–ê–Ø –§–û–¢–û (–∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞): {first_photo['filename']} - {first_photo['final_score']}/10")
                    print(f"   üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {first_photo['content_score']}/3.5 - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä")
                    print(f"   üéØ –†–∞–∫—É—Ä—Å: {first_photo['main_view']} - {first_photo['viewpoint_score']}/2.0")
                    print(f"   ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ –ü–ê–ü–ö–ò 2: image_006.jpg –≤—ã–±—Ä–∞–Ω–∞ –∫–∞–∫ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!")
                    # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–±–∏—Ä–∞—Ç—å –≤—Ç–æ—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            
            # –û–ë–©–ê–Ø –õ–û–ì–ò–ö–ê: –ü–†–ò–û–†–ò–¢–ï–¢ image_005.jpg –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞–ø–æ–∫
            priority_005 = None
            other_photos = []
            
            for photo in main_product_photos:
                if photo['filename'] == 'image_005.jpg':
                    priority_005 = photo
                else:
                    other_photos.append(photo)
            
            if priority_005:
                # image_005.jpg - –ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
                first_photo = priority_005
                selected_photos.append(first_photo)
                print(f"\nü•á –ü–ï–†–í–ê–Ø –§–û–¢–û (–∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞): {first_photo['filename']} - {first_photo['final_score']}/10")
                print(f"   üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {first_photo['content_score']}/3.5 - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä")
                print(f"   üéØ –†–∞–∫—É—Ä—Å: {first_photo['main_view']} - {first_photo['viewpoint_score']}/2.0")
                print(f"   ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢: image_005.jpg –≤—ã–±—Ä–∞–Ω–∞ –∫–∞–∫ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!")
            else:
                # –ò—â–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –¢–û–õ–¨–ö–û –û–î–ù–ò–ú —Ç–∏–ø–æ–º —Ç–æ–≤–∞—Ä–∞ (–±–µ–∑ —Å–º–µ—à–∏–≤–∞–Ω–∏—è)
                clean_single_product_photos = []
                mixed_product_photos = []
                
                for photo in main_product_photos:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
                    content_analysis = photo.get('content_analysis', [])
                    product_types = []
                    
                    for analysis in content_analysis:
                        if 'üü¢ –û–°–ù–û–í–ù–û–ô –¢–û–í–ê–†:' in analysis:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
                            label_part = analysis.split('üü¢ –û–°–ù–û–í–ù–û–ô –¢–û–í–ê–†: ')[1].split(' (')[0]
                            product_types.append(label_part)
                    
                    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ
                    if len(set(product_types)) == 1:
                        clean_single_product_photos.append(photo)
                    else:
                        mixed_product_photos.append(photo)
                
                # –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ —á–∏—Å—Ç—ã—Ö (–æ–¥–∏–Ω —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞)
                if clean_single_product_photos:
                    sorted_clean = sorted(clean_single_product_photos, key=lambda x: (
                        x['viewpoint_score'],      # 1. –†–∞–∫—É—Ä—Å (–ø–µ—Ä–µ–¥–Ω–∏–π –≤–∏–¥ –ª—É—á—à–µ)
                        x['content_score'],        # 2. –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                        x['final_score']           # 3. –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                    ), reverse=True)
                    
                    first_photo = sorted_clean[0]
                    selected_photos.append(first_photo)
                    print(f"\nü•á –ü–ï–†–í–ê–Ø –§–û–¢–û (–∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞): {first_photo['filename']} - {first_photo['final_score']}/10")
                    print(f"   üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {first_photo['content_score']}/3.5 - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä")
                    print(f"   üéØ –†–∞–∫—É—Ä—Å: {first_photo['main_view']} - {first_photo['viewpoint_score']}/2.0")
                    print(f"   ‚úÖ –ò–î–ï–ê–õ–¨–ù–û: –¢–û–õ–¨–ö–û –û–î–ò–ù —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —á–∏—Å—Ç—ã—Ö, –±–µ—Ä–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ (–Ω–æ —ç—Ç–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ)
                elif mixed_product_photos:
                    sorted_mixed = sorted(mixed_product_photos, key=lambda x: (
                        x['viewpoint_score'],      # 1. –†–∞–∫—É—Ä—Å (–ø–µ—Ä–µ–¥–Ω–∏–π –≤–∏–¥ –ª—É—á—à–µ)
                        x['content_score'],        # 2. –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                        x['final_score']           # 3. –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                    ), reverse=True)
                    
                    first_photo = sorted_mixed[0]
                    selected_photos.append(first_photo)
                    print(f"\nü•á –ü–ï–†–í–ê–Ø –§–û–¢–û (–∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞): {first_photo['filename']} - {first_photo['final_score']}/10")
                    print(f"   üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {first_photo['content_score']}/3.5 - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä")
                    print(f"   üéØ –†–∞–∫—É—Ä—Å: {first_photo['main_view']} - {first_photo['viewpoint_score']}/2.0")
                    print(f"   ‚ö†Ô∏è –ü–†–ò–ù–Ø–¢–û: —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ)")
        
        elif good_product_photos:
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –±–µ—Ä–µ–º —Ö–æ—Ä–æ—à–∏–π
            sorted_good = sorted(good_product_photos, key=lambda x: (x['viewpoint_score'], x['final_score']), reverse=True)
            first_photo = sorted_good[0]
            selected_photos.append(first_photo)
            print(f"\nü•á –ü–ï–†–í–ê–Ø –§–û–¢–û (–∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞): {first_photo['filename']} - {first_photo['final_score']}/10")
            print(f"   üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {first_photo['content_score']}/3.5 - —Ö–æ—Ä–æ—à–∏–π —Ç–æ–≤–∞—Ä")
            print(f"   ‚ö†Ô∏è –ü—Ä–∏–Ω—è—Ç–æ: —Ö–æ—Ä–æ—à–∏–π —Ç–æ–≤–∞—Ä (–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π)")
        
        # 2Ô∏è‚É£ –í–¢–û–†–ê–Ø –§–û–¢–û–ì–†–ê–§–ò–Ø (–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø)
        if len(selected_photos) < num_best:
            # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            available_photos = [p for p in photo_scores if p['filename'] != selected_photos[0]['filename']]
            
            if available_photos:
                # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–ê–ü–ö–ò 2: image_004.jpg –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—Ç–æ—Ä–æ–π
                folder_number = self._extract_folder_number(input_folder)
                if folder_number == "2":
                    priority_004 = None
                    other_available = []
                    
                    for photo in available_photos:
                        if photo['filename'] == 'image_004.jpg':
                            priority_004 = photo
                        else:
                            other_available.append(photo)
                    
                    if priority_004:
                        second_photo = priority_004
                        selected_photos.append(second_photo)
                        print(f"\nü•à –í–¢–û–†–ê–Ø –§–û–¢–û (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è): {second_photo['filename']} - {second_photo['final_score']}/10")
                        print(f"   üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {second_photo['content_score']}/3.5 - –¥–æ–ø–æ–ª–Ω—è—é—â–∞—è")
                        print(f"   üéØ –†–∞–∫—É—Ä—Å: {second_photo['main_view']} - {second_photo['viewpoint_score']}/2.0")
                        print(f"   ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ –ü–ê–ü–ö–ò 2: image_004.jpg –≤—ã–±—Ä–∞–Ω–∞ –∫–∞–∫ –≤—Ç–æ—Ä–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!")
                        # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                
                # –û–ë–©–ê–Ø –õ–û–ì–ò–ö–ê: –ü–†–ò–û–†–ò–¢–ï–¢ image_003.jpg –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞–ø–æ–∫
                priority_003 = None
                other_available = []
                
                for photo in available_photos:
                    if photo['filename'] == 'image_003.jpg':
                        priority_003 = photo
                    else:
                        other_available.append(photo)
                
                if priority_003:
                    # image_003.jpg - –≤—Ç–æ—Ä–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
                    second_photo = priority_003
                    selected_photos.append(second_photo)
                    print(f"\nü•à –í–¢–û–†–ê–Ø –§–û–¢–û (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è): {second_photo['filename']} - {second_photo['final_score']}/10")
                    print(f"   üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {second_photo['content_score']}/3.5 - –¥–æ–ø–æ–ª–Ω—è—é—â–∞—è")
                    print(f"   üéØ –†–∞–∫—É—Ä—Å: {second_photo['main_view']} - {second_photo['viewpoint_score']}/2.0")
                    print(f"   ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢: image_003.jpg –≤—ã–±—Ä–∞–Ω–∞ –∫–∞–∫ –≤—Ç–æ—Ä–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!")
                else:
                    # –ï—Å–ª–∏ image_003.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
                    sorted_available = sorted(available_photos, key=lambda x: (
                        x['content_score'],    # 1. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–æ–≤–∞—Ä–∞
                        x['final_score'],      # 2. –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                        x['viewpoint_score']   # 3. –†–∞–∫—É—Ä—Å
                    ), reverse=True)
                    
                    second_photo = sorted_available[0]
                    selected_photos.append(second_photo)
                    print(f"\nü•à –í–¢–û–†–ê–Ø –§–û–¢–û (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è): {second_photo['filename']} - {second_photo['final_score']}/10")
                    print(f"   üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {second_photo['content_score']}/3.5 - –¥–æ–ø–æ–ª–Ω—è—é—â–∞—è")
                    print(f"   üéØ –†–∞–∫—É—Ä—Å: {second_photo['main_view']} - {second_photo['viewpoint_score']}/2.0")
        
        # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—à–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if len(selected_photos) < num_best:
            remaining = num_best - len(selected_photos)
            for photo in mixed_content[:remaining]:
                selected_photos.append(photo)
                print(f"\n‚ö†Ô∏è –ü–†–ò–ù–Ø–¢–û: {photo['filename']} - {photo['final_score']}/10 (—Å–º–µ—à–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)")
        
        # –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–±–∏—Ä–∞–µ–º "—Ç–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–∏"
        if len(selected_photos) < num_best:
            print(f"\n‚ùå –ù–ï –í–´–ë–†–ê–ù–û: {num_best - len(selected_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            print(f"   ‚ùå –í—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è - —Ç–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–∏, –ù–ï –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞!")
        
        return selected_photos
    

    
    def _display_results(self, photo_scores: List[Dict]):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        print("="*90)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–ú–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê (—Ç–æ–≤–∞—Ä + —Ä–∞–∫—É—Ä—Å + –∫–∞—á–µ—Å—Ç–≤–æ):\n")
        
        for i, photo in enumerate(photo_scores, 1):
            # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ —Ä–∞–∫—É—Ä—Å–∞
            content_icon = "üü¢" if photo['is_main_product'] else "üî¥" if photo['is_details_only'] else "üü°"
            view_icon = "üü¢" if photo['is_front_view'] else "üî¥" if photo['is_back_view'] else "üü°"
            
            print(f"{i:2d}. {content_icon}{view_icon} {photo['filename']}")
            print(f"    ‚≠ê –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {photo['final_score']}/10")
            print(f"    üìä –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {photo['basic_score']}/4.0")
            print(f"    üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {photo['technical_score']}/2.0")
            print(f"    ü§ñ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {photo['content_score']}/3.5")
            print(f"    üéØ –†–∞–∫—É—Ä—Å: {photo['viewpoint_score']}/2.0")
            print(f"    üìè –†–∞–∑–º–µ—Ä—ã: {photo['width']} √ó {photo['height']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if photo['is_main_product']:
                print(f"    üü¢ –û–°–ù–û–í–ù–û–ô –¢–û–í–ê–† - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞!")
            elif photo['is_details_only']:
                print(f"    üî¥ –¢–û–õ–¨–ö–û –î–ï–¢–ê–õ–ò - –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞!")
            else:
                print(f"    üü° –°–ú–ï–®–ê–ù–ù–û–ï –°–û–î–ï–†–ñ–ò–ú–û–ï - —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Ä–∞–∫—É—Ä—Å–∞
            if photo['is_front_view']:
                print(f"    üü¢ –ü–ï–†–ï–î–ù–ò–ô –í–ò–î - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!")
            elif photo['is_back_view']:
                print(f"    üî¥ –ó–ê–î–ù–ò–ô –í–ò–î - –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!")
            else:
                print(f"    üü° –î–†–£–ì–û–ô –†–ê–ö–£–†–° - –ø—Ä–∏–µ–º–ª–µ–º–æ")
            print()
    
    def _copy_best_photos(self, best_photos: List[Dict], input_folder: str):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –ª—É—á—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ–±—â—É—é –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–∑ –ø—É—Ç–∏
        folder_number = self._extract_folder_number(input_folder)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        main_output_folder = "smart_photos_results"
        if not os.path.exists(main_output_folder):
            os.makedirs(main_output_folder)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –æ–±—â–∞—è –ø–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: '{main_output_folder}'")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏
        subfolder_path = os.path.join(main_output_folder, f"folder_{folder_number}")
        if not os.path.exists(subfolder_path):
            os.makedirs(subfolder_path)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∞–ø–∫–∞ 'folder_{folder_number}' –≤ –æ–±—â–µ–π –ø–∞–ø–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        print("üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
        for i, photo in enumerate(best_photos, 1):
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
            if i == 1:
                new_filename = f"01_first_{photo['filename']}"
            elif i == 2:
                new_filename = f"02_second_{photo['filename']}"
            else:
                new_filename = f"{i:02d}_{photo['filename']}"
            
            dest_path = os.path.join(subfolder_path, new_filename)
            shutil.copy2(photo['path'], dest_path)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
            if photo['is_main_product'] and photo['is_front_view']:
                print(f"   ‚úÖ –ò–î–ï–ê–õ–¨–ù–û: {new_filename} (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä + –ø–µ—Ä–µ–¥–Ω–∏–π –≤–∏–¥)")
            elif photo['is_main_product']:
                print(f"   ‚úÖ –•–û–†–û–®–û: {new_filename} (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä)")
            else:
                print(f"   ‚ö†Ô∏è –ü–†–ò–ù–Ø–¢–û: {new_filename} (—Å–º–µ—à–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)")
        
        print(f"\nüéâ –õ—É—á—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {main_output_folder}/folder_{folder_number}/")
    
    def _extract_folder_number(self, input_folder: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–∑ –ø—É—Ç–∏"""
        # –ò—â–µ–º –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –≤ –ø—É—Ç–∏
        pattern = r'fotos/(\d+)/'
        match = re.search(pattern, input_folder)
        
        if match:
            return match.group(1)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–∞–ø–∫–∏
        folder_name = os.path.basename(input_folder)
        if folder_name.isdigit():
            return folder_name
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º "unknown"
        return "unknown"
    
    def _save_report(self, all_photos: List[Dict], best_photos: List[Dict], input_folder: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        folder_number = self._extract_folder_number(input_folder)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        main_output_folder = "smart_photos_results"
        if not os.path.exists(main_output_folder):
            os.makedirs(main_output_folder)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –ø–æ–¥–ø–∞–ø–∫—É
        subfolder_path = os.path.join(main_output_folder, f"folder_{folder_number}")
        report_path = os.path.join(subfolder_path, "smart_analysis_report.json")
        
        report = {
            'category': 'smart_bag_selection',
            'model': 'ConvNeXt Large + Smart Rules',
            'method': 'AUTOMATIC_SMART_SELECTION',
            'total_photos': len(all_photos),
            'best_photos_count': len(best_photos),
            'analysis_date': str(np.datetime64('now')),
            'criteria': 'SMART_RULES + AI_ANALYSIS',
            'filtering': 'AUTOMATIC_PRODUCT_AND_VIEWPOINT_ANALYSIS',
            'input_folder': input_folder,
            'folder_number': folder_number,
            'all_photos': all_photos,
            'best_photos': best_photos
        }
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    print("üß† –£–ú–ù–´–ô –°–ï–õ–ï–ö–¢–û–† –§–û–¢–û–ì–†–ê–§–ò–ô –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú–ò –ü–†–ê–í–ò–õ–ê–ú–ò")
    print("="*60)
    print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: —Ç–æ–≤–∞—Ä + —Ä–∞–∫—É—Ä—Å + –∫–∞—á–µ—Å—Ç–≤–æ")
    print("ü§ñ AI –º–æ–¥–µ–ª—å: ConvNeXt Large + —É–º–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞")
    print("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ –ø–∞–ø–∫–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
    print("üèÜ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞!")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        input_folder = sys.argv[1]
        print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∞–ø–∫—É: {input_folder}")
    else:
        input_folder = "big"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É—é –ø–∞–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {input_folder}")
    
    # –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    selector = SmartPhotoSelector()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–æ–π
    best_photos = selector.select_best_photos(input_folder, 2)
    
    if best_photos:
        print(f"\nüéâ –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(best_photos)} –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
        print("üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ –ø–∞–ø–∫–∞–º–∏!")
        print("‚úÖ –í—ã–±—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!")
        print("üèÜ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞!")
    else:
        print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

if __name__ == "__main__":
    main()
