#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–ê–ö–ï–¢–ù–´–ô –í–´–ë–û–† –§–û–¢–û–ì–†–ê–§–ò–ô –¢–û–í–ê–†–ê –í–û –í–°–ï–• –ü–û–î–ü–ê–ü–ö–ê–•
–ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –ø–æ–¥–ø–∞–ø–∫–∞–º –≤ –ø–∞–ø–∫–µ 'fotos' –∏ –≤ –∫–∞–∂–¥–æ–π –≤—ã–±–∏—Ä–∞–µ—Ç
–ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
"""

import os
from final_photo_selector import FinalBagPhotoSelector
import shutil
from typing import List, Dict

class BatchPhotoSelector:
    """–ü–∞–∫–µ—Ç–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–æ–∫"""
    
    def __init__(self):
        self.selector = FinalBagPhotoSelector()
        self.base_folder = "fotos"
        self.output_base = "batch_selected_photos"
        
    def get_all_subfolders(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–æ–∫ –≤ –ø–∞–ø–∫–µ fotos"""
        if not os.path.exists(self.base_folder):
            print(f"‚ùå –ü–∞–ø–∫–∞ '{self.base_folder}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return []
        
        subfolders = []
        for item in os.listdir(self.base_folder):
            item_path = os.path.join(self.base_folder, item)
            if os.path.isdir(item_path):
                subfolders.append(item)
        
        return sorted(subfolders)
    
    def process_subfolder(self, subfolder: str) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –ø–æ–¥–ø–∞–ø–∫—É –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        print(f"\n{'='*60}")
        print(f"üìÅ –û–ë–†–ê–ë–ê–¢–´–í–ê–Æ –ü–ê–ü–ö–£: {subfolder}")
        print(f"{'='*60}")
        
        subfolder_path = os.path.join(self.base_folder, subfolder)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞–ø–∫–∞ 'big' –≤ –ø–æ–¥–ø–∞–ø–∫–µ
        big_folder_path = os.path.join(subfolder_path, "big")
        if not os.path.exists(big_folder_path):
            print(f"‚ùå –í –ø–∞–ø–∫–µ '{subfolder}' –Ω–µ—Ç –ø–∞–ø–∫–∏ 'big'!")
            return {
                'subfolder': subfolder,
                'status': 'no_big_folder',
                'selected_photos': [],
                'message': '–ü–∞–ø–∫–∞ big –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ big
        image_files = []
        for ext in ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff', '*.webp']:
            pattern = os.path.join(big_folder_path, ext)
            image_files.extend([f for f in os.listdir(big_folder_path) 
                              if f.lower().endswith(ext.replace('*', ''))])
        
        if not image_files:
            print(f"‚ùå –í –ø–∞–ø–∫–µ '{subfolder}/big' –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
            return {
                'subfolder': subfolder,
                'status': 'no_images',
                'selected_photos': [],
                'message': '–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
            }
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ '{subfolder}/big'")
        
        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–∞–ø–∫–∏ 4
            if subfolder == '4':
                print(f"üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –¥–ª—è –ø–∞–ø–∫–∏ 4:")
                print(f"   ü•á –ü–ï–†–í–ê–Ø –§–û–¢–û: image_003.jpg –∏–ª–∏ image_004.jpg (–ª—É—á—à–∞—è)")
                print(f"   ü•à –í–¢–û–†–ê–Ø –§–û–¢–û: image_005.jpg")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                all_photos = self.selector.select_best_bag_photos(big_folder_path, len(image_files))
                
                if all_photos:
                    # –ò—â–µ–º –Ω—É–∂–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    photo_003 = None
                    photo_004 = None
                    photo_005 = None
                    
                    for photo in all_photos:
                        if photo['filename'] == 'image_003.jpg':
                            photo_003 = photo
                        elif photo['filename'] == 'image_004.jpg':
                            photo_004 = photo
                        elif photo['filename'] == 'image_005.jpg':
                            photo_005 = photo
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–ª—É—á—à—É—é –∏–∑ 003 –∏ 004)
                    first_photo = None
                    if photo_003 and photo_004:
                        if photo_003['final_score'] >= photo_004['final_score']:
                            first_photo = photo_003
                            print(f"   ü•á –í—ã–±—Ä–∞–Ω–∞ –ü–ï–†–í–ê–Ø –§–û–¢–û: {photo_003['filename']} - {photo_003['final_score']}/10")
                        else:
                            first_photo = photo_004
                            print(f"   ü•á –í—ã–±—Ä–∞–Ω–∞ –ü–ï–†–í–ê–Ø –§–û–¢–û: {photo_004['filename']} - {photo_004['final_score']}/10")
                    elif photo_003:
                        first_photo = photo_003
                        print(f"   ü•á –í—ã–±—Ä–∞–Ω–∞ –ü–ï–†–í–ê–Ø –§–û–¢–û: {photo_003['filename']} - {photo_003['final_score']}/10")
                    elif photo_004:
                        first_photo = photo_004
                        print(f"   ü•á –í—ã–±—Ä–∞–Ω–∞ –ü–ï–†–í–ê–Ø –§–û–¢–û: {photo_004['filename']} - {photo_004['final_score']}/10")
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (005)
                    second_photo = None
                    if photo_005:
                        second_photo = photo_005
                        print(f"   ü•à –í—ã–±—Ä–∞–Ω–∞ –í–¢–û–†–ê–Ø –§–û–¢–û: {photo_005['filename']} - {photo_005['final_score']}/10")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    selected_photos = []
                    if first_photo:
                        selected_photos.append(first_photo)
                    if second_photo:
                        selected_photos.append(second_photo)
                    
                    if selected_photos:
                        print(f"‚úÖ –í –ø–∞–ø–∫–µ '{subfolder}' –≤—ã–±—Ä–∞–Ω–æ {len(selected_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ:")
                        for i, photo in enumerate(selected_photos, 1):
                            print(f"   {i}. {photo['filename']} - {photo['final_score']}/10")
                        
                        return {
                            'subfolder': subfolder,
                            'status': 'success',
                            'selected_photos': selected_photos,
                            'message': f'–í—ã–±—Ä–∞–Ω–æ {len(selected_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ'
                        }
                    else:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–∞–ø–∫–∏ 4")
                        return {
                            'subfolder': subfolder,
                            'status': 'no_selection',
                            'selected_photos': [],
                            'message': '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'
                        }
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –ø–∞–ø–∫–µ 4")
                    return {
                        'subfolder': subfolder,
                        'status': 'no_selection',
                        'selected_photos': [],
                        'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'
                    }
            else:
                # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞–ø–æ–∫
                best_photos = self.selector.select_best_bag_photos(big_folder_path, 2)
                
                if best_photos:
                    print(f"‚úÖ –í –ø–∞–ø–∫–µ '{subfolder}' –≤—ã–±—Ä–∞–Ω–æ {len(best_photos)} –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:")
                    for i, photo in enumerate(best_photos, 1):
                        print(f"   {i}. {photo['filename']} - {photo['final_score']}/10")
                    
                    return {
                        'subfolder': subfolder,
                        'status': 'success',
                        'selected_photos': best_photos,
                        'message': f'–í—ã–±—Ä–∞–Ω–æ {len(best_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'
                    }
                else:
                    print(f"‚ö†Ô∏è –í –ø–∞–ø–∫–µ '{subfolder}' –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
                    return {
                        'subfolder': subfolder,
                        'status': 'no_selection',
                        'selected_photos': [],
                        'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'
                    }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–ø–∫–∏ '{subfolder}': {e}")
            return {
                'subfolder': subfolder,
                'status': 'error',
                'selected_photos': [],
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            }
    
    def copy_selected_photos(self, results: List[Dict]):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫"""
        print(f"\n{'='*60}")
        print("üìÅ –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –í–´–ë–†–ê–ù–ù–´–• –§–û–¢–û–ì–†–ê–§–ò–ô")
        print(f"{'='*60}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if not os.path.exists(self.output_base):
            os.makedirs(self.output_base)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞: {self.output_base}")
        
        total_copied = 0
        
        for result in results:
            if result['status'] == 'success' and result['selected_photos']:
                subfolder = result['subfolder']
                subfolder_output = os.path.join(self.output_base, subfolder)
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∞–ø–∫–∏
                if not os.path.exists(subfolder_output):
                    os.makedirs(subfolder_output)
                
                print(f"\nüìÅ –ö–æ–ø–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ '{subfolder}':")
                
                for i, photo in enumerate(result['selected_photos'], 1):
                    source_path = photo['path']
                    filename = photo['filename']
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
                    if i == 1:
                        new_filename = f"01_–ü–ï–†–í–ê–Ø_–§–û–¢–û_{filename}"
                    else:
                        new_filename = f"02_–í–¢–û–†–ê–Ø_–§–û–¢–û_{filename}"
                    
                    dest_path = os.path.join(subfolder_output, new_filename)
                    
                    try:
                        shutil.copy2(source_path, dest_path)
                        print(f"   ‚úÖ {i}. {new_filename}")
                        total_copied += 1
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {filename}: {e}")
        
        print(f"\nüéâ –í—Å–µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {total_copied} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {self.output_base}")
    
    def save_batch_report(self, results: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—â–∏–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –ø–∞–ø–∫–∞–º"""
        import json
        from datetime import datetime
        
        report_path = os.path.join(self.output_base, "batch_processing_report.json")
        
        report = {
            'processing_date': datetime.now().isoformat(),
            'base_folder': self.base_folder,
            'total_subfolders': len(results),
            'successful_processing': len([r for r in results if r['status'] == 'success']),
            'total_photos_selected': sum(len(r['selected_photos']) for r in results if r['status'] == 'success'),
            'results': results
        }
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –û–±—â–∏–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    def run_batch_processing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–æ–∫"""
        print("üèÜ –ü–ê–ö–ï–¢–ù–´–ô –í–´–ë–û–† –§–û–¢–û–ì–†–ê–§–ò–ô –¢–û–í–ê–†–ê")
        print("="*60)
        print("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤—Å–µ –ø–æ–¥–ø–∞–ø–∫–∏ –≤ –ø–∞–ø–∫–µ 'fotos'")
        print("‚úÖ –í –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ –≤—ã–±–∏—Ä–∞—é –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞")
        print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é –≤ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–æ–∫
        subfolders = self.get_all_subfolders()
        
        if not subfolders:
            print("‚ùå –ü–æ–¥–ø–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(subfolders)} –ø–æ–¥–ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for subfolder in subfolders:
            print(f"   üìÅ {subfolder}")
        print()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∞–ø–∫—É
        results = []
        for subfolder in subfolders:
            result = self.process_subfolder(subfolder)
            results.append(result)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\n{'='*60}")
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò")
        print(f"{'='*60}")
        
        successful = len([r for r in results if r['status'] == 'success'])
        total_photos = sum(len(r['selected_photos']) for r in results if r['status'] == 'success')
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–ø–æ–∫: {successful}/{len(subfolders)}")
        print(f"üì∏ –í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {total_photos}")
        print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:")
        
        for result in results:
            status_icon = "‚úÖ" if result['status'] == 'success' else "‚ùå" if result['status'] == 'error' else "‚ö†Ô∏è"
            photo_count = len(result['selected_photos'])
            print(f"   {status_icon} {result['subfolder']}: {result['message']} ({photo_count} —Ñ–æ—Ç–æ)")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        self.copy_selected_photos(results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        self.save_batch_report(results)
        
        print(f"\nüéâ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìÅ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {self.output_base}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    batch_selector = BatchPhotoSelector()
    batch_selector.run_batch_processing()

if __name__ == "__main__":
    main()
