#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –ú–û–î–ï–õ–ò ConvNeXt Large
–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–¥–µ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ
"""

import os
import shutil
from transformers import pipeline, AutoModelForImageClassification, AutoImageProcessor
import json

class ModelFixer:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    
    def __init__(self):
        self.model_name = "facebook/convnext-large-224"
        self.local_path = "./models/convnext-large-224"
        self.backup_path = "./models/convnext-large-224-backup"
        
    def clean_directories(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏"""
        print("üßπ –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏...")
        
        if os.path.exists(self.local_path):
            shutil.rmtree(self.local_path)
            print("   ‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –º–æ–¥–µ–ª–∏")
        
        if os.path.exists(self.backup_path):
            shutil.rmtree(self.backup_path)
            print("   ‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
        os.makedirs(self.local_path, exist_ok=True)
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏")
    
    def download_and_save_model(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–¥–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ"""
        print(f"\nüöÄ –°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å: {self.model_name}")
        print("   ‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é
            print("   üîÑ –°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å...")
            model = AutoModelForImageClassification.from_pretrained(self.model_name)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–∞–ø—Ä—è–º—É—é
            print("   üîÑ –°–∫–∞—á–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä...")
            processor = AutoImageProcessor.from_pretrained(self.model_name)
            
            print("   ‚úÖ –ú–æ–¥–µ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ–ª—É—á–µ–Ω—ã!")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            print("   üíæ –°–æ—Ö—Ä–∞–Ω—è—é –º–æ–¥–µ–ª—å...")
            model.save_pretrained(self.local_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            print("   üíæ –°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä...")
            processor.save_pretrained(self.local_path)
            
            print("   ‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            return False
    
    def test_local_model(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å"""
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º pipeline —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é
            local_pipeline = pipeline("image-classification", model=self.local_path)
            
            print("   ‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("   üéØ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return False
    
    def create_model_info(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
        print("\nüìÑ –°–æ–∑–¥–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏...")
        
        model_info = {
            "model_name": "ConvNeXt Large",
            "version": "224x224",
            "source": "facebook/convnext-large-224",
            "local_path": self.local_path,
            "description": "ConvNeXt Large –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            "accuracy": "86.6%",
            "download_date": "2024",
            "usage": "–í—ã–±–æ—Ä –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞",
            "requirements": {
                "input_size": "224x224",
                "format": "RGB",
                "normalization": "ImageNet"
            },
            "status": "FULLY_DOWNLOADED"
        }
        
        info_path = os.path.join(self.local_path, "model_info.json")
        with open(info_path, 'w', encoding='utf-8') as f:
            json.dump(model_info, f, ensure_ascii=False, indent=2)
        
        print("   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–∞!")
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏"""
        print(f"\nüíæ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
        
        try:
            shutil.copytree(self.local_path, self.backup_path)
            print("   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def show_final_structure(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        print(f"\nüìÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:")
        print("="*50)
        
        if os.path.exists(self.local_path):
            total_size = 0
            file_count = 0
            
            for root, dirs, files in os.walk(self.local_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    total_size += os.path.getsize(file_path)
                    file_count += 1
            
            size_mb = total_size / (1024 * 1024)
            size_gb = size_mb / 1024
            
            print(f"üìä –ú–æ–¥–µ–ª—å: {self.local_path}")
            print(f"üìÅ –§–∞–π–ª–æ–≤: {file_count}")
            print(f"üíæ –†–∞–∑–º–µ—Ä: {size_mb:.1f} –ú–ë ({size_gb:.2f} –ì–ë)")
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê!")
        
        print(f"\nüéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –ë–ï–ó –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!")
    
    def run_fix(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –ú–û–î–ï–õ–ò ConvNeXt Large")
        print("="*50)
        print("üéØ –¶–µ–ª—å: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å")
        print("üìÅ –ú–µ—Å—Ç–æ: ./models/convnext-large-224")
        print()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞–ø–∫–∏
        self.clean_directories()
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        if not self.download_and_save_model():
            print("‚ùå –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        self.create_model_info()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        if not self.test_local_model():
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self.create_backup()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.show_final_structure()
        
        print(f"\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print(f"üèÜ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å!")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    fixer = ModelFixer()
    success = fixer.run_fix()
    
    if success:
        print(f"\nüöÄ –ú–æ–¥–µ–ª—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print(f"üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python final_photo_selector.py")
    else:
        print(f"\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")

if __name__ == "__main__":
    main()
