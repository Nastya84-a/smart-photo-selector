#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–ö–ê–ß–ò–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò ConvNeXt Large –ü–û–õ–ù–û–°–¢–¨–Æ –õ–û–ö–ê–õ–¨–ù–û
–°–∫–∞—á–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –≤ –ø–∞–ø–∫—É models/ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã
"""

import os
import shutil
from transformers import ConvNextForImageClassification, ConvNextImageProcessor, pipeline
from transformers import AutoFeatureExtractor
import json

class ModelDownloader:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å ConvNeXt Large –ª–æ–∫–∞–ª—å–Ω–æ"""
    
    def __init__(self):
        self.model_name = "facebook/convnext-large-224"
        self.local_path = "./models/convnext-large-224"
        self.backup_path = "./models/convnext-large-224-backup"
        
    def create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏"""
        print("üìÅ –°–æ–∑–¥–∞—é –ø–∞–ø–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏...")
        
        if not os.path.exists("./models"):
            os.makedirs("./models")
            print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ./models")
        
        if not os.path.exists(self.local_path):
            os.makedirs(self.local_path)
            print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ./models/convnext-large-224")
        
        print("   üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –≥–æ—Ç–æ–≤–∞!")
    
    def download_model(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
        print(f"\nüöÄ –°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å: {self.model_name}")
        print("   ‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        print("   üìä –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: ~1.7 –ì–ë")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
            print("   üîÑ –°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å...")
            model = ConvNextForImageClassification.from_pretrained(self.model_name)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            print("   üîÑ –°–∫–∞—á–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä...")
            processor = ConvNextImageProcessor.from_pretrained(self.model_name)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º feature extractor (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            print("   üîÑ –°–∫–∞—á–∏–≤–∞—é feature extractor...")
            feature_extractor = AutoFeatureExtractor.from_pretrained(self.model_name)
            
            print("   ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∫–∞—á–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return model, processor, feature_extractor
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            return None, None, None
    
    def save_model_locally(self, model, processor, feature_extractor):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–¥–µ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ"""
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –º–æ–¥–µ–ª—å –≤: {self.local_path}")
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            print("   üíæ –°–æ—Ö—Ä–∞–Ω—è—é –º–æ–¥–µ–ª—å...")
            model.save_pretrained(self.local_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            print("   üíæ –°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä...")
            processor.save_pretrained(self.local_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º feature extractor
            print("   üíæ –°–æ—Ö—Ä–∞–Ω—è—é feature extractor...")
            feature_extractor.save_pretrained(self.local_path)
            
            print("   ‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            return False
    
    def create_model_info(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
        print("\nüìÑ –°–æ–∑–¥–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏...")
        
        model_info = {
            "model_name": "ConvNeXt Large",
            "version": "224x224",
            "source": "facebook/convnext-large-224",
            "local_path": self.local_path,
            "description": "ConvNeXt Large –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            "accuracy": "86.6%",
            "download_date": "2024",
            "usage": "–í—ã–±–æ—Ä –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞",
            "requirements": {
                "input_size": "224x224",
                "format": "RGB",
                "normalization": "ImageNet"
            }
        }
        
        info_path = os.path.join(self.local_path, "model_info.json")
        with open(info_path, 'w', encoding='utf-8') as f:
            json.dump(model_info, f, ensure_ascii=False, indent=2)
        
        print("   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–∞!")
    
    def test_local_model(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å"""
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º pipeline —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é
            local_pipeline = pipeline("image-classification", model=self.local_path)
            
            print("   ‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("   üéØ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return False
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏"""
        print(f"\nüíæ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
        
        try:
            if os.path.exists(self.backup_path):
                shutil.rmtree(self.backup_path)
            
            shutil.copytree(self.local_path, self.backup_path)
            print("   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def update_scripts(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        print(f"\nüìù –û–±–Ω–æ–≤–ª—è—é —Å–∫—Ä–∏–ø—Ç—ã...")
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º final_photo_selector.py
            self.update_script("final_photo_selector.py")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º batch_photo_selector.py
            self.update_script("batch_photo_selector.py")
            
            print("   ‚úÖ –°–∫—Ä–∏–ø—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤: {e}")
            return False
    
    def update_script(self, script_name):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∫—Ä–∏–ø—Ç"""
        if not os.path.exists(script_name):
            print(f"   ‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é")
            return
        
        print(f"   üìù –û–±–Ω–æ–≤–ª—è—é {script_name}...")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(script_name, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–¥–µ–ª—å
        old_model = "facebook/convnext-large-224"
        new_model = "./models/convnext-large-224"
        
        if old_model in content:
            content = content.replace(old_model, new_model)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(script_name, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"      ‚úÖ {script_name} –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            print(f"      ‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å –≤ {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def show_final_structure(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        print(f"\nüìÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:")
        print("="*50)
        
        if os.path.exists(self.local_path):
            total_size = 0
            file_count = 0
            
            for root, dirs, files in os.walk(self.local_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    total_size += os.path.getsize(file_path)
                    file_count += 1
            
            size_mb = total_size / (1024 * 1024)
            size_gb = size_mb / 1024
            
            print(f"üìä –ú–æ–¥–µ–ª—å: {self.local_path}")
            print(f"üìÅ –§–∞–π–ª–æ–≤: {file_count}")
            print(f"üíæ –†–∞–∑–º–µ—Ä: {size_mb:.1f} –ú–ë ({size_gb:.2f} –ì–ë)")
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        
        print(f"\nüéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –ë–ï–ó –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!")
        print(f"üìù –°–∫—Ä–∏–ø—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é")
    
    def run_download(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        print("üèÜ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò ConvNeXt Large")
        print("="*50)
        print("üéØ –¶–µ–ª—å: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å")
        print("üìÅ –ú–µ—Å—Ç–æ: ./models/convnext-large-224")
        print("üíæ –†–∞–∑–º–µ—Ä: ~1.7 –ì–ë")
        print()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
        self.create_directories()
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
        model, processor, feature_extractor = self.download_model()
        if not model:
            print("‚ùå –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        if not self.save_model_locally(model, processor, feature_extractor):
            print("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        self.create_model_info()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        if not self.test_local_model():
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self.create_backup()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
        if not self.update_scripts():
            print("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.show_final_structure()
        
        print(f"\nüéâ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print(f"üèÜ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ü–û–õ–ù–û–°–¢–¨–Æ –õ–û–ö–ê–õ–¨–ù–ê–Ø AI –º–æ–¥–µ–ª—å!")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    downloader = ModelDownloader()
    success = downloader.run_download()
    
    if success:
        print(f"\nüöÄ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print(f"üìù –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python final_photo_selector.py")
    else:
        print(f"\n‚ùå –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")

if __name__ == "__main__":
    main()
