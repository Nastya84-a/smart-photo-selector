#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
"""

import os
import json
import shutil
from pathlib import Path
from typing import List, Dict, Tuple, Optional
from PIL import Image
import numpy as np

try:
    from transformers import pipeline
    from smart_photo_selector import SmartPhotoSelector
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    exit(1)


class UniversalSmartSelector:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ª—é–±—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å AI –º–æ–¥–µ–ª—å—é –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
        print("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        self.base_selector = SmartPhotoSelector()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        self.product_categories = {
            'bags': {
                'keywords': ['mailbag', 'postbag', 'backpack', 'purse', 'handbag', 'bag', 'tote', 'satchel'],
                'details': ['buckle', 'wallet', 'zipper', 'pocket', 'strap', 'handle'],
                'description': '–°—É–º–∫–∏, —Ä—é–∫–∑–∞–∫–∏, –∫–æ—à–µ–ª—å–∫–∏',
                'priority_rules': {
                    'first_photo': '–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä, –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π',
                    'second_photo': '–î–æ–ø–æ–ª–Ω—è—é—â–∞—è, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–µ—Ç–∞–ª–∏'
                }
            },
            'clothing': {
                'keywords': ['shirt', 'dress', 'pants', 'jacket', 'blouse', 'skirt', 'coat', 'sweater', 't-shirt'],
                'details': ['button', 'zipper', 'fabric', 'pattern', 'collar', 'sleeve', 'pocket'],
                'description': '–û–¥–µ–∂–¥–∞, —Ç–µ–∫—Å—Ç–∏–ª—å',
                'priority_rules': {
                    'first_photo': '–ü–æ–ª–Ω—ã–π –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞, —Ö–æ—Ä–æ—à–∏–π —Ä–∞–∫—É—Ä—Å',
                    'second_photo': '–î–µ—Ç–∞–ª–∏ –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞–∫—É—Ä—Å'
                }
            },
            'electronics': {
                'keywords': ['phone', 'laptop', 'computer', 'camera', 'tablet', 'device', 'gadget', 'smartphone'],
                'details': ['screen', 'button', 'cable', 'charger', 'port', 'antenna'],
                'description': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, –≥–∞–¥–∂–µ—Ç—ã',
                'priority_rules': {
                    'first_photo': '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä –≤ —Ñ–æ–∫—É—Å–µ',
                    'second_photo': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ'
                }
            },
            'jewelry': {
                'keywords': ['ring', 'necklace', 'earring', 'bracelet', 'watch', 'pendant', 'brooch'],
                'details': ['stone', 'metal', 'clasp', 'chain', 'gem', 'diamond'],
                'description': '–£–∫—Ä–∞—à–µ–Ω–∏—è, –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏',
                'priority_rules': {
                    'first_photo': '–ß–µ—Ç–∫–∏–π –≤–∏–¥ —É–∫—Ä–∞—à–µ–Ω–∏—è',
                    'second_photo': '–î–µ—Ç–∞–ª–∏ –∏–ª–∏ –Ω–∞ –º–æ–¥–µ–ª–∏'
                }
            },
            'shoes': {
                'keywords': ['shoe', 'boot', 'sneaker', 'sandal', 'heel', 'footwear', 'loafer', 'pump'],
                'details': ['sole', 'laces', 'buckle', 'heel', 'toe', 'insole'],
                'description': '–û–±—É–≤—å',
                'priority_rules': {
                    'first_photo': '–ü–æ–ª–Ω—ã–π –≤–∏–¥ –æ–±—É–≤–∏',
                    'second_photo': '–î–µ—Ç–∞–ª–∏ –∏–ª–∏ –Ω–∞ –Ω–æ–≥–µ'
                }
            },
            'cosmetics': {
                'keywords': ['cosmetic', 'makeup', 'cream', 'beauty', 'skincare', 'lipstick', 'foundation'],
                'details': ['brush', 'applicator', 'mirror', 'case', 'tube'],
                'description': '–ö–æ—Å–º–µ—Ç–∏–∫–∞, —É—Ö–æ–¥',
                'priority_rules': {
                    'first_photo': '–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç',
                    'second_photo': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–µ—Ç–∞–ª–∏'
                }
            },
            'general': {
                'keywords': ['product', 'object', 'item', 'accessory', 'tool', 'equipment'],
                'details': ['part', 'component', 'material', 'texture'],
                'description': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                'priority_rules': {
                    'first_photo': '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä',
                    'second_photo': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
                }
            }
        }
        
        print("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        print(f"üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(self.product_categories)}")
    
    def detect_product_category(self, photo_scores: List[Dict]) -> Tuple[str, float]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            photo_scores: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            
        Returns:
            Tuple[str, float]: (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
        """
        print("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ AI –º–µ—Ç–∫–∏
        all_labels = []
        for photo in photo_scores:
            if 'ai_analysis' in photo:
                for label, confidence in photo['ai_analysis']:
                    all_labels.append((label.lower(), confidence))
        
        if not all_labels:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            return 'general', 0.5
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_scores = {}
        for category, config in self.product_categories.items():
            score = 0
            total_matches = 0
            
            for label, confidence in all_labels:
                if label in config['keywords']:
                    score += confidence * 2.0  # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å
                    total_matches += 1
                elif label in config['details']:
                    score += confidence * 0.5  # –î–µ—Ç–∞–ª–∏ –∏–º–µ—é—Ç –º–µ–Ω—å—à–∏–π –≤–µ—Å
            
            if total_matches > 0:
                category_scores[category] = score / total_matches
            else:
                category_scores[category] = 0
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –±–∞–ª–ª–æ–º
        if category_scores:
            best_category = max(category_scores, key=category_scores.get)
            confidence = category_scores[best_category]
            
            print(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {best_category}")
            print(f"   üìù {self.product_categories[best_category]['description']}")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
            
            return best_category, confidence
        
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'general'")
        return 'general', 0.3
    
    def apply_category_rules(self, photo_scores: List[Dict], category: str) -> List[Dict]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤—ã–±–æ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
        
        Args:
            photo_scores: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            category: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            List[Dict]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        """
        print(f"‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
        
        if category not in self.product_categories:
            print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞")
            return self.base_selector._smart_select_best(photo_scores, 2, "")
        
        config = self.product_categories[category]
        print(f"üìã –ü—Ä–∞–≤–∏–ª–∞: {config['priority_rules']}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category == 'bags':
            return self._apply_bag_rules(photo_scores)
        elif category == 'clothing':
            return self._apply_clothing_rules(photo_scores)
        elif category == 'electronics':
            return self._apply_electronics_rules(photo_scores)
        elif category == 'jewelry':
            return self._apply_jewelry_rules(photo_scores)
        elif category == 'shoes':
            return self._apply_shoes_rules(photo_scores)
        elif category == 'cosmetics':
            return self._apply_cosmetics_rules(photo_scores)
        else:
            return self._apply_general_rules(photo_scores)
    
    def _apply_bag_rules(self, photo_scores: List[Dict]) -> List[Dict]:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å—É–º–æ–∫"""
        print("üëú –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è —Å—É–º–æ–∫...")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –¥–µ—Ç–∞–ª–∏
        main_products = []
        detail_photos = []
        
        for photo in photo_scores:
            if 'ai_analysis' in photo:
                has_main_product = False
                has_details = False
                
                for label, confidence in photo['ai_analysis']:
                    label_lower = label.lower()
                    if label_lower in ['mailbag', 'postbag', 'backpack', 'purse', 'handbag', 'bag']:
                        has_main_product = True
                    if label_lower in ['buckle', 'wallet', 'zipper', 'pocket']:
                        has_details = True
                
                if has_main_product and not has_details:
                    main_products.append(photo)
                elif has_details:
                    detail_photos.append(photo)
                else:
                    main_products.append(photo)  # –§–æ—Ç–æ –±–µ–∑ —á–µ—Ç–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        main_products.sort(key=lambda x: x.get('final_score', 0), reverse=True)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ
        selected = []
        if main_products:
            selected.append(main_products[0])  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä
        
        if len(main_products) > 1:
            selected.append(main_products[1])  # –í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ - —Ç–æ–∂–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä
        elif detail_photos:
            detail_photos.sort(key=lambda x: x.get('final_score', 0), reverse=True)
            selected.append(detail_photos[0])  # –ò–ª–∏ —Ñ–æ—Ç–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
        
        return selected[:2]
    
    def _apply_clothing_rules(self, photo_scores: List[Dict]) -> List[Dict]:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–¥–µ–∂–¥—ã"""
        print("üëó –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è –æ–¥–µ–∂–¥—ã...")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–æ–ª–Ω—ã–π –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞, —Ö–æ—Ä–æ—à–∏–π —Ä–∞–∫—É—Ä—Å
        sorted_photos = sorted(photo_scores, key=lambda x: (
            x.get('viewpoint_score', 0),
            x.get('final_score', 0)
        ), reverse=True)
        
        return sorted_photos[:2]
    
    def _apply_electronics_rules(self, photo_scores: List[Dict]) -> List[Dict]:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏"""
        print("üì± –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏...")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —á–µ—Ç–∫–æ—Å—Ç—å, –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä –≤ —Ñ–æ–∫—É—Å–µ
        sorted_photos = sorted(photo_scores, key=lambda x: (
            x.get('content_score', 0),
            x.get('final_score', 0),
            x.get('viewpoint_score', 0)
        ), reverse=True)
        
        return sorted_photos[:2]
    
    def _apply_jewelry_rules(self, photo_scores: List[Dict]) -> List[Dict]:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏–π"""
        print("üíç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏–π...")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —á–µ—Ç–∫–æ—Å—Ç—å, –¥–µ—Ç–∞–ª–∏, –∫–∞—á–µ—Å—Ç–≤–æ
        sorted_photos = sorted(photo_scores, key=lambda x: (
            x.get('final_score', 0),
            x.get('content_score', 0)
        ), reverse=True)
        
        return sorted_photos[:2]
    
    def _apply_shoes_rules(self, photo_scores: List[Dict]) -> List[Dict]:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–±—É–≤–∏"""
        print("üëü –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è –æ–±—É–≤–∏...")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–æ–ª–Ω—ã–π –≤–∏–¥, –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–∞–∫—É—Ä—Å
        sorted_photos = sorted(photo_scores, key=lambda x: (
            x.get('viewpoint_score', 0),
            x.get('final_score', 0)
        ), reverse=True)
        
        return sorted_photos[:2]
    
    def _apply_cosmetics_rules(self, photo_scores: List[Dict]) -> List[Dict]:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–æ—Å–º–µ—Ç–∏–∫–∏"""
        print("üíÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è –∫–æ—Å–º–µ—Ç–∏–∫–∏...")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç, –∫–∞—á–µ—Å—Ç–≤–æ
        sorted_photos = sorted(photo_scores, key=lambda x: (
            x.get('content_score', 0),
            x.get('final_score', 0)
        ), reverse=True)
        
        return sorted_photos[:2]
    
    def _apply_general_rules(self, photo_scores: List[Dict]) -> List[Dict]:
        """–û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–∞–≤–∏–ª...")
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—â–µ–º—É –∫–∞—á–µ—Å—Ç–≤—É
        sorted_photos = sorted(photo_scores, key=lambda x: x.get('final_score', 0), reverse=True)
        return sorted_photos[:2]
    
    def select_best_photos(self, input_folder: str, num_best: int = 2) -> List[Dict]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            input_folder: –ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            num_best: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            
        Returns:
            List[Dict]: –õ—É—á—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        print(f"üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞–ø–∫–∏: {input_folder}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        photo_scores = self.base_selector.analyze_photos(input_folder)
        
        if not photo_scores:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
            return []
        
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photo_scores)}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞
        category, confidence = self.detect_product_category(photo_scores)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        best_photos = self.apply_category_rules(photo_scores, category)
        
        if best_photos:
            print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(best_photos)}")
            print(f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._display_results(best_photos, category)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._save_results(best_photos, input_folder, category)
            
            return best_photos
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
            return []
    
    def _display_results(self, best_photos: List[Dict], category: str):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–±–æ—Ä–∞"""
        print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–ë–û–†–ê –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ò '{category.upper()}':")
        print("=" * 60)
        
        for i, photo in enumerate(best_photos, 1):
            print(f"\nüì∏ –§–û–¢–û #{i}: {photo['filename']}")
            print(f"   üìä –û–±—â–∏–π –±–∞–ª–ª: {photo.get('final_score', 0):.2f}")
            print(f"   üéØ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {photo.get('content_score', 0):.2f}")
            print(f"   üìê –†–∞–∫—É—Ä—Å: {photo.get('viewpoint_score', 0):.2f}")
            print(f"   üìÅ –ü—É—Ç—å: {photo['path']}")
            
            if 'ai_analysis' in photo:
                print("   ü§ñ AI –∞–Ω–∞–ª–∏–∑:")
                for label, confidence in photo['ai_analysis'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –º–µ—Ç–∫–∏
                    print(f"      ‚Ä¢ {label}: {confidence:.3f}")
    
    def _save_results(self, best_photos: List[Dict], input_folder: str, category: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫—É"""
        output_dir = f"universal_results_{category}"
        os.makedirs(output_dir, exist_ok=True)
        
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤: {output_dir}")
        
        for i, photo in enumerate(best_photos, 1):
            src_path = photo['path']
            filename = photo['filename']
            new_filename = f"{i:02d}_{category}_{filename}"
            dst_path = os.path.join(output_dir, new_filename)
            
            try:
                shutil.copy2(src_path, dst_path)
                print(f"   ‚úÖ {new_filename}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {filename}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report = {
            'category': category,
            'input_folder': input_folder,
            'analysis_date': str(Path().cwd()),
            'best_photos': [
                {
                    'filename': photo['filename'],
                    'final_score': photo.get('final_score', 0),
                    'content_score': photo.get('content_score', 0),
                    'viewpoint_score': photo.get('viewpoint_score', 0)
                }
                for photo in best_photos
            ]
        }
        
        report_path = os.path.join(output_dir, f"analysis_report_{category}.json")
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) != 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python universal_smart_selector.py <–ø–∞–ø–∫–∞_—Å_—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏>")
        print("–ü—Ä–∏–º–µ—Ä: python universal_smart_selector.py fotos/1/big")
        sys.exit(1)
    
    input_folder = sys.argv[1]
    
    if not os.path.exists(input_folder):
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {input_folder}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    selector = UniversalSmartSelector()
    
    try:
        best_photos = selector.select_best_photos(input_folder)
        
        if best_photos:
            print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        else:
            print(f"\n‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

